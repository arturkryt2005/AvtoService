@using AvtoService.Data.Models
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer

<h2 class="form-title">Связаться с нами</h2>

<EditForm Model="@contactForm" OnValidSubmit="HandleSubmit" FormName="ContactForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-container">
        <div class="form-group">
            <label for="name">Имя</label>
            <InputText id="name" @bind-Value="contactForm.Name" class="form-control" placeholder="Введите Имя" />
            <ValidationMessage For="() => contactForm.Name" />
        </div>

        <div class="form-group">
            <label for="email">Почта</label>
            <InputText id="email" @bind-Value="contactForm.Email" class="form-control" placeholder="Введите вашу почту" />
            <ValidationMessage For="() => contactForm.Email" />
        </div>

        <div class="form-group">
            <label for="phone">Телефон</label>
            <InputText id="phone" @bind-Value="contactForm.Phone" class="form-control" placeholder="+7 (777) 777-77-77" />
            <ValidationMessage For="() => contactForm.Phone" />
        </div>

        <div class="form-group">
            <label for="subject">Тема</label>
            <InputText id="subject" @bind-Value="contactForm.Subject" class="form-control" placeholder="Тема" />
            <ValidationMessage For="() => contactForm.Subject" />
        </div>

        <div class="form-group">
            <label for="message">Доп. Информация</label>
            <InputTextArea id="message" @bind-Value="contactForm.AdditionalInfo" class="form-control" rows="4" placeholder="Введите ваше сообщение..." />
            <ValidationMessage For="() => contactForm.AdditionalInfo" />
        </div>

        <button type="submit" class="btn-submit">ОТПРАВИТЬ</button>
    </div>
</EditForm>

@code {
    private ContactForm contactForm = new ContactForm();

    private async Task HandleSubmit()
    {
        var httpClient = HttpClientFactory.CreateClient("GlobalClient");
        contactForm.SubmissionDate = DateTime.UtcNow;
        var response = await httpClient.PostAsJsonAsync("api/ContactForm", contactForm);

        if (response.IsSuccessStatusCode)
        {
            contactForm = new ContactForm();
            Console.WriteLine("Форма успешно отправлена!");
        }
        else
        {
            Console.WriteLine("Ошибка при отправке формы.");
        }
    }

    public class ContactForm
    {
        [Required(ErrorMessage = "Поле 'Имя' обязательно для заполнения.")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Имя должно содержать от 3 до 50 символов.")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Поле 'Почта' обязательно для заполнения.")]
        [EmailAddress(ErrorMessage = "Некорректный формат электронной почты.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Поле 'Телефон' обязательно для заполнения.")]
        [RegularExpression(@"^\+?[0-9]{1,3}[-.\s]?\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{2}[-.\s]?\d{2}$", ErrorMessage = "Некорректный формат телефона.")]
        public string Phone { get; set; }

        [Required(ErrorMessage = "Поле 'Тема' обязательно для заполнения.")]
        [StringLength(100, MinimumLength = 5, ErrorMessage = "Тема должна содержать от 5 до 100 символов.")]
        public string Subject { get; set; }

        [Required(ErrorMessage = "Поле 'Доп. информация' обязательно для заполнения.")]
        [StringLength(1000, MinimumLength = 10, ErrorMessage = "Сообщение должно содержать от 10 до 1000 символов.")]
        public string AdditionalInfo { get; set; }

        public DateTime SubmissionDate { get; set; }
    }
}